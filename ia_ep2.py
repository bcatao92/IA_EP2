# -*- coding: utf-8 -*-
"""IA-EP2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPrAVnKUzmbCQReYfdIM_B0oIni9B6CR

Fonte https://www.youtube.com/watch?v=2C5uGteyhS4

# Importando o dataset
"""

#!pip install tensorflow

import tensorflow as tf
from tensorflow import keras

print(tf.__version__)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

mnist = keras.datasets.fashion_mnist

type(mnist)

(X_train,y_train),(X_test,y_test) = mnist.load_data()

#mnist.load_data()

X_train.shape, y_train.shape

X_test.shape,y_test.shape

np.max(X_train)

np.mean(X_train)

y_train

class_names = ['top','trouser','pullover','dress','coat','sandal','shirt','sneaker','bag','ankle boot']

"""Data exploration"""

X_train.shape

X_test.shape

plt.figure()
plt.imshow(X_train[12])
plt.colorbar()

#X_train[12]

y_train

X_train = X_train/255.0

X_test = X_test/255.0

plt.figure()
plt.imshow(X_train[1])
plt.colorbar()

np.max(X_train)



plt.figure()
plt.imshow(X_train[1])
plt.colorbar()

"""# Construindo o mdelo com TF 2.0"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten,Dense

# if 2 or more hidden layers then it is called Deep Neural Network (DNN)
model = Sequential()
model.add(Flatten(input_shape = (28,28)))
model.add(Dense(128, activation = 'relu'))
model.add(Dense(128, activation = 'relu'))
model.add(Dense(10, activation = 'softmax'))

model.summary()

"""Compilação do modelo:

*   Função de perda
*   Otimizador
*   Métricas
"""

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy',metrics = ['accuracy'])

model.fit(X_train,y_train, epochs = 10)

test_loss, test_acc = model.evaluate(X_test, y_test)
print(test_acc)

from sklearn.metrics import accuracy_score

# y_pred = model.predict_class(X_test)
y_pred = np.argmax(model.predict(X_test), axis=-1)

accuracy_score(y_test,y_pred)

y_pred

pred = model.predict(X_test)

pred

pred[0]

class_names

np.argmax(pred[0])

np.argmax(pred[1])

plt.figure()
plt.imshow(X_train[0])
plt.colorbar()

pred = np.argmax(model.predict(X_test[0].reshape(1,-1)))
pred

class_names[pred]

model.save('model')
model.save_weights('model.h5')

model1 = keras.models.load_model('model')
model1.load_weights('model.h5')

pred = np.argmax(model1.predict(X_test[10].reshape(1,28,28)))
print(pred)